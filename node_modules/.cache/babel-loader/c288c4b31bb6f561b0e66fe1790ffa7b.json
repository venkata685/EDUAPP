{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manju\\\\Desktop\\\\eduapp1\\\\eduapp\\\\src\\\\components\\\\charts\\\\index.js\";\nimport React from \"react\";\nimport { PieChart, Pie, Tooltip } from \"recharts\";\n\nfunction percentage(partialValue, totalValue) {\n  return 100 * partialValue / totalValue;\n}\n\nexport const Charts = props => {\n  const chartData = [];\n\n  if (props.data && props.showPercentage) {\n    const totalvalue = Object.values(props.data).filter(e => e !== 0).reduce((a, b) => a + b, 0);\n\n    for (let key in props.data) {\n      if (props.data[key]) {\n        let percentageValue = percentage(props.data[key], totalvalue).toFixed(2);\n        chartData.push({\n          name: key,\n          value: parseFloat(percentageValue)\n        });\n      }\n    }\n  } else if (props.data && !props.showPercentage) {\n    for (let key in props.data) {\n      if (props.data[key]) chartData.push({\n        name: key,\n        value: props.data[key]\n      });\n    }\n  }\n\n  return React.createElement(PieChart, {\n    width: 120,\n    height: 120,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Pie, {\n    data: chartData,\n    dataKey: \"value\",\n    nameKey: \"name\",\n    cx: \"50%\",\n    cy: \"50%\",\n    innerRadius: 30,\n    outerRadius: 50,\n    paddingAngle: 5,\n    fill: \"#8884d8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["C:\\Users\\manju\\Desktop\\eduapp1\\eduapp\\src\\components\\charts\\index.js"],"names":["React","PieChart","Pie","Tooltip","percentage","partialValue","totalValue","Charts","props","chartData","data","showPercentage","totalvalue","Object","values","filter","e","reduce","a","b","key","percentageValue","toFixed","push","name","value","parseFloat"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,OAAxB,QAAuC,UAAvC;;AAEA,SAASC,UAAT,CAAoBC,YAApB,EAAkCC,UAAlC,EAA8C;AAC5C,SAAQ,MAAMD,YAAP,GAAuBC,UAA9B;AACD;;AAED,OAAO,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAC7B,QAAMC,SAAS,GAAG,EAAlB;;AACA,MAAID,KAAK,CAACE,IAAN,IAAcF,KAAK,CAACG,cAAxB,EAAwC;AACtC,UAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcN,KAAK,CAACE,IAApB,EAChBK,MADgB,CACTC,CAAC,IAAIA,CAAC,KAAK,CADF,EAEhBC,MAFgB,CAET,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAFL,EAEQ,CAFR,CAAnB;;AAGA,SAAK,IAAIC,GAAT,IAAgBZ,KAAK,CAACE,IAAtB,EAA4B;AAC1B,UAAIF,KAAK,CAACE,IAAN,CAAWU,GAAX,CAAJ,EAAqB;AACnB,YAAIC,eAAe,GAAGjB,UAAU,CAACI,KAAK,CAACE,IAAN,CAAWU,GAAX,CAAD,EAAkBR,UAAlB,CAAV,CAAwCU,OAAxC,CACpB,CADoB,CAAtB;AAGAb,QAAAA,SAAS,CAACc,IAAV,CAAe;AACbC,UAAAA,IAAI,EAAEJ,GADO;AAEbK,UAAAA,KAAK,EAAEC,UAAU,CAACL,eAAD;AAFJ,SAAf;AAID;AACF;AACF,GAfD,MAeO,IAAIb,KAAK,CAACE,IAAN,IAAc,CAACF,KAAK,CAACG,cAAzB,EAAyC;AAC9C,SAAK,IAAIS,GAAT,IAAgBZ,KAAK,CAACE,IAAtB,EAA4B;AAC1B,UAAIF,KAAK,CAACE,IAAN,CAAWU,GAAX,CAAJ,EACEX,SAAS,CAACc,IAAV,CAAe;AAAEC,QAAAA,IAAI,EAAEJ,GAAR;AAAaK,QAAAA,KAAK,EAAEjB,KAAK,CAACE,IAAN,CAAWU,GAAX;AAApB,OAAf;AACH;AACF;;AAED,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,GAAjB;AAAsB,IAAA,MAAM,EAAE,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AACE,IAAA,IAAI,EAAEX,SADR;AAEE,IAAA,OAAO,EAAC,OAFV;AAGE,IAAA,OAAO,EAAC,MAHV;AAIE,IAAA,EAAE,EAAC,KAJL;AAKE,IAAA,EAAE,EAAC,KALL;AAME,IAAA,WAAW,EAAE,EANf;AAOE,IAAA,WAAW,EAAE,EAPf;AAQE,IAAA,YAAY,EAAE,CARhB;AASE,IAAA,IAAI,EAAC,SATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAYE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF;AAgBD,CAxCM","sourcesContent":["import React from \"react\";\r\nimport { PieChart, Pie, Tooltip } from \"recharts\";\r\n\r\nfunction percentage(partialValue, totalValue) {\r\n  return (100 * partialValue) / totalValue;\r\n}\r\n\r\nexport const Charts = props => {\r\n  const chartData = [];\r\n  if (props.data && props.showPercentage) {\r\n    const totalvalue = Object.values(props.data)\r\n      .filter(e => e !== 0)\r\n      .reduce((a, b) => a + b, 0);\r\n    for (let key in props.data) {\r\n      if (props.data[key]) {\r\n        let percentageValue = percentage(props.data[key], totalvalue).toFixed(\r\n          2\r\n        );\r\n        chartData.push({\r\n          name: key,\r\n          value: parseFloat(percentageValue)\r\n        });\r\n      }\r\n    }\r\n  } else if (props.data && !props.showPercentage) {\r\n    for (let key in props.data) {\r\n      if (props.data[key])\r\n        chartData.push({ name: key, value: props.data[key] });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <PieChart width={120} height={120}>\r\n      <Pie\r\n        data={chartData}\r\n        dataKey=\"value\"\r\n        nameKey=\"name\"\r\n        cx=\"50%\"\r\n        cy=\"50%\"\r\n        innerRadius={30}\r\n        outerRadius={50}\r\n        paddingAngle={5}\r\n        fill=\"#8884d8\"\r\n      />\r\n      <Tooltip />\r\n    </PieChart>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}